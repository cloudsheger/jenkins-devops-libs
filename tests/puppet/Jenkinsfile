// experimental library
// for dynamic retrieval
library identifier: 'jenkins-devops-libs@master', retriever: modernSCM(
  [$class: 'GitSCMSource',
   remote: 'https://github.com/mschuchard/jenkins-devops-libs.git'])
// if added in Jenkins global config shared libraries
//@Library('jenkins-devops-libs')_
// if added in Jenkins global config shared libraries and the github api plugin is bugging out and slamming github with requests
//library('jenkins-devops-libs')_

pipeline {
  agent any

  stages {
    stage('Tests') {
      parallel {
        stage('Token Generate') {
          steps {
            script {
              puppet.token {
                puppet.token(
                  password: 'password', // password for the rbac token
                  secure:   false, // optional verify ssl connection
                  server:   'puppet', // optional server hosting puppet server
                  username: 'username' // username for the rbac token
                )
              }
            }
          }
        }
        stage('Code Deploy') {
          steps {
            script {
              puppet.codeDeploy(
                environments: ['development', 'production'], // optional environments to deploy (default is to deploy all environments)
                servers:      ['puppet'], // optional server hosting code manager
                tokenFile:    '/var/lib/jenkins/.puppetlabs/token', // rbac token for deploying with code manager
                wait:         true // optional wait for code manager to finish deployment
              )
            }
          }
        }
        stage('Execute Task') {
          steps {
            script {
              puppet.task(
                params:    "['action':'install', 'name':'httpd']", // optional input
                scope:     ['localhost'], // scope for deployment
                task:      'package', // name of the task to execute
                tokenFile: '/var/lib/jenkins/.puppetlabs/token' // rbac token for executing tasks
              )
            }
          }
        }
      }
    }
  }
}
