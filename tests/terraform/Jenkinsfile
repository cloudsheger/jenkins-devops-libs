// for dynamic retrieval
library identifier: 'jenkins-devops-libs@master', retriever: modernSCM(
  [$class: 'GitSCMSource',
   remote: 'https://github.com/mschuchard/jenkins-devops-libs.git'])
// if added in Jenkins global config shared libraries
//@Library('jenkins-devops-libs')_
// if added in Jenkins global config shared libraries and the github api plugin is bugging out and slamming github with requests
//library('jenkins-devops-libs')_

pipeline {
  agent any

  stages {
    stage('Install') {
      steps {
        script {
          terraform.install(
            version:      '0.13.5',
            install_path: '/tmp',
            platform:     'linux_amd64'
          )
        }
      }
    }
    stage('Initialize') {
      steps {
        sh 'curl -L https://raw.githubusercontent.com/mschuchard/jenkins-devops-libs/master/tests/terraform/main.tf -o /tmp/main.tf'

        script {
          terraform.init(
            bin: '/tmp/terraform',
            dir: '/tmp'
          )
        }
      }
    }
    stage('Workspace') {
      steps {
        script {
          terraform.workspace(
            bin:       '/tmp/terraform',
            dir:       '/tmp',
            workspace: 'default'
          )
        }
      }
    }
    stage('Validate') {
      steps {
        script {
          terraform.validate(
            bin:  '/tmp/terraform',
            dir:  '/tmp',
            json: true
          )
        }
      }
    }
    stage('Fmt') {
      steps {
        script {
          terraform.fmt(
            dir:   '/tmp',
            bin:   '/tmp/terraform',
            check: true,
            diff:  true
          )
        }
      }
    }
    stage('Plan') {
      steps {
        script {
          terraform.plan(
            bin: '/tmp/terraform',
            dir: '/tmp'
          )
        }
      }
    }
    stage('Apply') {
      steps {
        script {
          terraform.apply(
            bin:         '/tmp/terraform',
            config_path: '/tmp/plan.tfplan'
          )
        }
      }
    }
    stage('Output') {
      steps {
        script {
          terraform.output(
            bin:  '/tmp/terraform',
            json: false
          )
        }
      }
    }
    stage('State') {
      steps {
        script {
          terraform.apply(
            bin:       '/tmp/terraform',
            command:   'move',
            resources: ['local_file.file':'local_file.not_file']
          )
        }
      }
    }
    stage('Destroy') {
      steps {
        script {
          terraform.destroy(
            bin:         '/tmp/terraform',
            config_path: '/tmp'
          )
        }
      }
    }
  }
}
